services:
    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        hostname: zookeeper
        container_name: zookeeper
        ports:
            - "2181:2181"
        networks:
            - kafka_network
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    kafka:
        image: confluentinc/cp-kafka:latest
        hostname: kafka
        container_name: kafka
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        networks:
            - kafka_network
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        links:
            - zookeeper

    schema-registry:
        image: confluentinc/cp-schema-registry:latest
        hostname: schema-registry
        container_name: schema-registry
        depends_on:
            - zookeeper
            - kafka
        ports:
            - "8081:8081"
        networks:
            - kafka_network
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
            SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            SCHEMA_REGISTRY_DEBUG: 'true'
        links:
            - kafka

    akhq:
        image: tchiotludo/akhq:0.24.0
        container_name: akhq
        profiles:
            -   kafka-ui
        restart: unless-stopped
        environment:
            AKHQ_CONFIGURATION: |
                akhq:
                  connections:
                    docker-kafka-server:
                      properties:
                        bootstrap.servers: "kafka:29092"
                      schema-registry:
                        url: "http://schema-registry:8081"
                      connect:
                        - name: "connect"
                          url: "http://connect:8083"
        ports:
            - "8090:8080"
        networks:
            - kafka_network
        depends_on:
            - zookeeper
            - kafka
            - schema-registry
        links:
            - kafka
            - schema-registry

    dynamodb-local:
        command: "-jar DynamoDBLocal.jar -inMemory -sharedDb"
        image: "amazon/dynamodb-local:latest"
        container_name: dynamodb-local
        profiles:
            - dynamodb
        ports:
            - "8000:8000"
        volumes:
            - "./docker/dynamodb:/home/dynamodblocal/data"
        working_dir: /home/dynamodblocal

    prometheus:
        container_name: prometheus
        image: prom/prometheus:latest
        profiles:
            - monitoring
        restart: always
        extra_hosts:
            - "host.docker.internal:host-gateway"
        command:
            - --config.file=/etc/prometheus/prometheus.yaml
        volumes:
            - "./docker/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml"
        ports:
            - "9090:9090"

    grafana:
        container_name: grafana
        image: grafana/grafana:latest
        profiles:
            - monitoring
        volumes:
            - "./docker/grafana/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml"
        ports:
            - "3000:3000"

networks:
    kafka_network:
        driver: bridge